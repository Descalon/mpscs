package CsBaseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Class;
  private ConceptPresentation props_ClassMember;
  private ConceptPresentation props_ClassType;
  private ConceptPresentation props_CodeBlock;
  private ConceptPresentation props_IStaticModifiableConcept;
  private ConceptPresentation props_IVisibilityModifiableConcept;
  private ConceptPresentation props_IntType;
  private ConceptPresentation props_MethodDefinition;
  private ConceptPresentation props_PrivateVisibilityModifier;
  private ConceptPresentation props_ProtectedVisibilityModifier;
  private ConceptPresentation props_PublicVisibilityModifier;
  private ConceptPresentation props_Statement;
  private ConceptPresentation props_StaticModifier;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_VisibilityModifier;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Class:
        if (props_Class == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents a class");
          cpb.presentationByName();
          props_Class = cpb.create();
        }
        return props_Class;
      case LanguageConceptSwitch.ClassMember:
        if (props_ClassMember == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents a class member (e.g. a field, a method, ...)");
          cpb.presentationByName();
          props_ClassMember = cpb.create();
        }
        return props_ClassMember;
      case LanguageConceptSwitch.ClassType:
        if (props_ClassType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents a type which is a class");
          cpb.presentationByReference(0x250303846d664bd0L, 0xbe085e945e7502b5L, 0x7b67658aa44afc63L, 0x7b67658aa44afc64L, "class", "", "");
          props_ClassType = cpb.create();
        }
        return props_ClassType;
      case LanguageConceptSwitch.CodeBlock:
        if (props_CodeBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents an indented code block");
          cpb.rawPresentation("{");
          props_CodeBlock = cpb.create();
        }
        return props_CodeBlock;
      case LanguageConceptSwitch.IStaticModifiableConcept:
        if (props_IStaticModifiableConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IStaticModifiableConcept = cpb.create();
        }
        return props_IStaticModifiableConcept;
      case LanguageConceptSwitch.IVisibilityModifiableConcept:
        if (props_IVisibilityModifiableConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IVisibilityModifiableConcept = cpb.create();
        }
        return props_IVisibilityModifiableConcept;
      case LanguageConceptSwitch.IntType:
        if (props_IntType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents the int type");
          cpb.rawPresentation("int");
          props_IntType = cpb.create();
        }
        return props_IntType;
      case LanguageConceptSwitch.MethodDefinition:
        if (props_MethodDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents a method definition");
          cpb.presentationByName();
          props_MethodDefinition = cpb.create();
        }
        return props_MethodDefinition;
      case LanguageConceptSwitch.PrivateVisibilityModifier:
        if (props_PrivateVisibilityModifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents the private visibility keyword");
          cpb.rawPresentation("private");
          props_PrivateVisibilityModifier = cpb.create();
        }
        return props_PrivateVisibilityModifier;
      case LanguageConceptSwitch.ProtectedVisibilityModifier:
        if (props_ProtectedVisibilityModifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents the protected visibility keyword");
          cpb.rawPresentation("protected");
          props_ProtectedVisibilityModifier = cpb.create();
        }
        return props_ProtectedVisibilityModifier;
      case LanguageConceptSwitch.PublicVisibilityModifier:
        if (props_PublicVisibilityModifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents the public visibility keyword");
          cpb.rawPresentation("public");
          props_PublicVisibilityModifier = cpb.create();
        }
        return props_PublicVisibilityModifier;
      case LanguageConceptSwitch.Statement:
        if (props_Statement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents a statement");
          cpb.rawPresentation("Statement");
          props_Statement = cpb.create();
        }
        return props_Statement;
      case LanguageConceptSwitch.StaticModifier:
        if (props_StaticModifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents the static keyword");
          cpb.rawPresentation("static");
          props_StaticModifier = cpb.create();
        }
        return props_StaticModifier;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents a type");
          cpb.rawPresentation("Type");
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.VisibilityModifier:
        if (props_VisibilityModifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Represents a visibility keyword (e.g. public, private, ...)");
          cpb.rawPresentation("VisibilityModifier");
          props_VisibilityModifier = cpb.create();
        }
        return props_VisibilityModifier;
    }
    return null;
  }
}
