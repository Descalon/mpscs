package CsBaseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAndExpression = createDescriptorForAndExpression();
  /*package*/ final ConceptDescriptor myConceptArgument = createDescriptorForArgument();
  /*package*/ final ConceptDescriptor myConceptArgumentsList = createDescriptorForArgumentsList();
  /*package*/ final ConceptDescriptor myConceptArrayInitializer = createDescriptorForArrayInitializer();
  /*package*/ final ConceptDescriptor myConceptAsOperator = createDescriptorForAsOperator();
  /*package*/ final ConceptDescriptor myConceptBaseAccessExpression = createDescriptorForBaseAccessExpression();
  /*package*/ final ConceptDescriptor myConceptBinaryOperation = createDescriptorForBinaryOperation();
  /*package*/ final ConceptDescriptor myConceptBitwiseAndExpression = createDescriptorForBitwiseAndExpression();
  /*package*/ final ConceptDescriptor myConceptBitwiseLeftShiftExpression = createDescriptorForBitwiseLeftShiftExpression();
  /*package*/ final ConceptDescriptor myConceptBitwiseOrExpression = createDescriptorForBitwiseOrExpression();
  /*package*/ final ConceptDescriptor myConceptBitwiseRightExpression = createDescriptorForBitwiseRightExpression();
  /*package*/ final ConceptDescriptor myConceptBitwiseXorExpression = createDescriptorForBitwiseXorExpression();
  /*package*/ final ConceptDescriptor myConceptBoolLiteral = createDescriptorForBoolLiteral();
  /*package*/ final ConceptDescriptor myConceptBoolType = createDescriptorForBoolType();
  /*package*/ final ConceptDescriptor myConceptBuiltInIsExpression = createDescriptorForBuiltInIsExpression();
  /*package*/ final ConceptDescriptor myConceptBuiltInType = createDescriptorForBuiltInType();
  /*package*/ final ConceptDescriptor myConceptByteType = createDescriptorForByteType();
  /*package*/ final ConceptDescriptor myConceptCharLiteral = createDescriptorForCharLiteral();
  /*package*/ final ConceptDescriptor myConceptCharType = createDescriptorForCharType();
  /*package*/ final ConceptDescriptor myConceptCheckedExpression = createDescriptorForCheckedExpression();
  /*package*/ final ConceptDescriptor myConceptCheckedOrUncheckedExpression = createDescriptorForCheckedOrUncheckedExpression();
  /*package*/ final ConceptDescriptor myConceptCommaConstant = createDescriptorForCommaConstant();
  /*package*/ final ConceptDescriptor myConceptConstantUtility = createDescriptorForConstantUtility();
  /*package*/ final ConceptDescriptor myConceptDecimalType = createDescriptorForDecimalType();
  /*package*/ final ConceptDescriptor myConceptDivisionExpression = createDescriptorForDivisionExpression();
  /*package*/ final ConceptDescriptor myConceptDoubleType = createDescriptorForDoubleType();
  /*package*/ final ConceptDescriptor myConceptDummyExpression = createDescriptorForDummyExpression();
  /*package*/ final ConceptDescriptor myConceptDummyUnaryExpression = createDescriptorForDummyUnaryExpression();
  /*package*/ final ConceptDescriptor myConceptEmptyArrayInitializer = createDescriptorForEmptyArrayInitializer();
  /*package*/ final ConceptDescriptor myConceptEqualsExpression = createDescriptorForEqualsExpression();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptExpressionInBraces = createDescriptorForExpressionInBraces();
  /*package*/ final ConceptDescriptor myConceptExpressionList = createDescriptorForExpressionList();
  /*package*/ final ConceptDescriptor myConceptExpressionListExpression = createDescriptorForExpressionListExpression();
  /*package*/ final ConceptDescriptor myConceptExpressionTest = createDescriptorForExpressionTest();
  /*package*/ final ConceptDescriptor myConceptFloatType = createDescriptorForFloatType();
  /*package*/ final ConceptDescriptor myConceptFunctionCallExpression = createDescriptorForFunctionCallExpression();
  /*package*/ final ConceptDescriptor myConceptGreaterThanExpression = createDescriptorForGreaterThanExpression();
  /*package*/ final ConceptDescriptor myConceptGreaterThanOrEqualToExpression = createDescriptorForGreaterThanOrEqualToExpression();
  /*package*/ final ConceptDescriptor myConceptIdentifier = createDescriptorForIdentifier();
  /*package*/ final ConceptDescriptor myConceptIntLiteral = createDescriptorForIntLiteral();
  /*package*/ final ConceptDescriptor myConceptIntType = createDescriptorForIntType();
  /*package*/ final ConceptDescriptor myConceptIsExpression = createDescriptorForIsExpression();
  /*package*/ final ConceptDescriptor myConceptLessThanExpression = createDescriptorForLessThanExpression();
  /*package*/ final ConceptDescriptor myConceptLessThanOrEqualToExpression = createDescriptorForLessThanOrEqualToExpression();
  /*package*/ final ConceptDescriptor myConceptLiteral = createDescriptorForLiteral();
  /*package*/ final ConceptDescriptor myConceptLongType = createDescriptorForLongType();
  /*package*/ final ConceptDescriptor myConceptMinusExpression = createDescriptorForMinusExpression();
  /*package*/ final ConceptDescriptor myConceptModuloExpression = createDescriptorForModuloExpression();
  /*package*/ final ConceptDescriptor myConceptMultiplicationExpression = createDescriptorForMultiplicationExpression();
  /*package*/ final ConceptDescriptor myConceptNewArrayTypeExpression = createDescriptorForNewArrayTypeExpression();
  /*package*/ final ConceptDescriptor myConceptNewNonArrayExpression = createDescriptorForNewNonArrayExpression();
  /*package*/ final ConceptDescriptor myConceptNewTypeExpression = createDescriptorForNewTypeExpression();
  /*package*/ final ConceptDescriptor myConceptNonArrayType = createDescriptorForNonArrayType();
  /*package*/ final ConceptDescriptor myConceptNonEmptyArrayInitializer = createDescriptorForNonEmptyArrayInitializer();
  /*package*/ final ConceptDescriptor myConceptNotEqualsExpression = createDescriptorForNotEqualsExpression();
  /*package*/ final ConceptDescriptor myConceptNullCoalescingExpression = createDescriptorForNullCoalescingExpression();
  /*package*/ final ConceptDescriptor myConceptNullLiteral = createDescriptorForNullLiteral();
  /*package*/ final ConceptDescriptor myConceptObjectType = createDescriptorForObjectType();
  /*package*/ final ConceptDescriptor myConceptOrExpression = createDescriptorForOrExpression();
  /*package*/ final ConceptDescriptor myConceptOutConstant = createDescriptorForOutConstant();
  /*package*/ final ConceptDescriptor myConceptPlusExpression = createDescriptorForPlusExpression();
  /*package*/ final ConceptDescriptor myConceptPostDecrementExpression = createDescriptorForPostDecrementExpression();
  /*package*/ final ConceptDescriptor myConceptPostIncrementExpression = createDescriptorForPostIncrementExpression();
  /*package*/ final ConceptDescriptor myConceptPreDecrementExpression = createDescriptorForPreDecrementExpression();
  /*package*/ final ConceptDescriptor myConceptPreIncrementExpression = createDescriptorForPreIncrementExpression();
  /*package*/ final ConceptDescriptor myConceptPredefinedDotExpression = createDescriptorForPredefinedDotExpression();
  /*package*/ final ConceptDescriptor myConceptPrimaryDotExpression = createDescriptorForPrimaryDotExpression();
  /*package*/ final ConceptDescriptor myConceptPrimaryExpression = createDescriptorForPrimaryExpression();
  /*package*/ final ConceptDescriptor myConceptQualifiedIdentifier = createDescriptorForQualifiedIdentifier();
  /*package*/ final ConceptDescriptor myConceptRankSpecifier = createDescriptorForRankSpecifier();
  /*package*/ final ConceptDescriptor myConceptRealLiteral = createDescriptorForRealLiteral();
  /*package*/ final ConceptDescriptor myConceptRefConstant = createDescriptorForRefConstant();
  /*package*/ final ConceptDescriptor myConceptRefOutConstant = createDescriptorForRefOutConstant();
  /*package*/ final ConceptDescriptor myConceptSByteType = createDescriptorForSByteType();
  /*package*/ final ConceptDescriptor myConceptShortType = createDescriptorForShortType();
  /*package*/ final ConceptDescriptor myConceptStringLiteral = createDescriptorForStringLiteral();
  /*package*/ final ConceptDescriptor myConceptStringType = createDescriptorForStringType();
  /*package*/ final ConceptDescriptor myConceptTernaryOperatorExpression = createDescriptorForTernaryOperatorExpression();
  /*package*/ final ConceptDescriptor myConceptThisExpression = createDescriptorForThisExpression();
  /*package*/ final ConceptDescriptor myConceptType = createDescriptorForType();
  /*package*/ final ConceptDescriptor myConceptTypeTypeOf = createDescriptorForTypeTypeOf();
  /*package*/ final ConceptDescriptor myConceptUIntType = createDescriptorForUIntType();
  /*package*/ final ConceptDescriptor myConceptULongType = createDescriptorForULongType();
  /*package*/ final ConceptDescriptor myConceptUShortType = createDescriptorForUShortType();
  /*package*/ final ConceptDescriptor myConceptUnaryDereferenceExpression = createDescriptorForUnaryDereferenceExpression();
  /*package*/ final ConceptDescriptor myConceptUnaryExpression = createDescriptorForUnaryExpression();
  /*package*/ final ConceptDescriptor myConceptUnaryExpressionWithOperator = createDescriptorForUnaryExpressionWithOperator();
  /*package*/ final ConceptDescriptor myConceptUnaryMinusExpression = createDescriptorForUnaryMinusExpression();
  /*package*/ final ConceptDescriptor myConceptUnaryNotExpression = createDescriptorForUnaryNotExpression();
  /*package*/ final ConceptDescriptor myConceptUnaryPlusExpression = createDescriptorForUnaryPlusExpression();
  /*package*/ final ConceptDescriptor myConceptUnaryTildaExpression = createDescriptorForUnaryTildaExpression();
  /*package*/ final ConceptDescriptor myConceptUnaryTypedExpression = createDescriptorForUnaryTypedExpression();
  /*package*/ final ConceptDescriptor myConceptUncheckedExpression = createDescriptorForUncheckedExpression();
  /*package*/ final ConceptDescriptor myConceptVariableInitializer = createDescriptorForVariableInitializer();
  /*package*/ final ConceptDescriptor myConceptVoidTypeOf = createDescriptorForVoidTypeOf();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAndExpression, myConceptArgument, myConceptArgumentsList, myConceptArrayInitializer, myConceptAsOperator, myConceptBaseAccessExpression, myConceptBinaryOperation, myConceptBitwiseAndExpression, myConceptBitwiseLeftShiftExpression, myConceptBitwiseOrExpression, myConceptBitwiseRightExpression, myConceptBitwiseXorExpression, myConceptBoolLiteral, myConceptBoolType, myConceptBuiltInIsExpression, myConceptBuiltInType, myConceptByteType, myConceptCharLiteral, myConceptCharType, myConceptCheckedExpression, myConceptCheckedOrUncheckedExpression, myConceptCommaConstant, myConceptConstantUtility, myConceptDecimalType, myConceptDivisionExpression, myConceptDoubleType, myConceptDummyExpression, myConceptDummyUnaryExpression, myConceptEmptyArrayInitializer, myConceptEqualsExpression, myConceptExpression, myConceptExpressionInBraces, myConceptExpressionList, myConceptExpressionListExpression, myConceptExpressionTest, myConceptFloatType, myConceptFunctionCallExpression, myConceptGreaterThanExpression, myConceptGreaterThanOrEqualToExpression, myConceptIdentifier, myConceptIntLiteral, myConceptIntType, myConceptIsExpression, myConceptLessThanExpression, myConceptLessThanOrEqualToExpression, myConceptLiteral, myConceptLongType, myConceptMinusExpression, myConceptModuloExpression, myConceptMultiplicationExpression, myConceptNewArrayTypeExpression, myConceptNewNonArrayExpression, myConceptNewTypeExpression, myConceptNonArrayType, myConceptNonEmptyArrayInitializer, myConceptNotEqualsExpression, myConceptNullCoalescingExpression, myConceptNullLiteral, myConceptObjectType, myConceptOrExpression, myConceptOutConstant, myConceptPlusExpression, myConceptPostDecrementExpression, myConceptPostIncrementExpression, myConceptPreDecrementExpression, myConceptPreIncrementExpression, myConceptPredefinedDotExpression, myConceptPrimaryDotExpression, myConceptPrimaryExpression, myConceptQualifiedIdentifier, myConceptRankSpecifier, myConceptRealLiteral, myConceptRefConstant, myConceptRefOutConstant, myConceptSByteType, myConceptShortType, myConceptStringLiteral, myConceptStringType, myConceptTernaryOperatorExpression, myConceptThisExpression, myConceptType, myConceptTypeTypeOf, myConceptUIntType, myConceptULongType, myConceptUShortType, myConceptUnaryDereferenceExpression, myConceptUnaryExpression, myConceptUnaryExpressionWithOperator, myConceptUnaryMinusExpression, myConceptUnaryNotExpression, myConceptUnaryPlusExpression, myConceptUnaryTildaExpression, myConceptUnaryTypedExpression, myConceptUncheckedExpression, myConceptVariableInitializer, myConceptVoidTypeOf);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AndExpression:
        return myConceptAndExpression;
      case LanguageConceptSwitch.Argument:
        return myConceptArgument;
      case LanguageConceptSwitch.ArgumentsList:
        return myConceptArgumentsList;
      case LanguageConceptSwitch.ArrayInitializer:
        return myConceptArrayInitializer;
      case LanguageConceptSwitch.AsOperator:
        return myConceptAsOperator;
      case LanguageConceptSwitch.BaseAccessExpression:
        return myConceptBaseAccessExpression;
      case LanguageConceptSwitch.BinaryOperation:
        return myConceptBinaryOperation;
      case LanguageConceptSwitch.BitwiseAndExpression:
        return myConceptBitwiseAndExpression;
      case LanguageConceptSwitch.BitwiseLeftShiftExpression:
        return myConceptBitwiseLeftShiftExpression;
      case LanguageConceptSwitch.BitwiseOrExpression:
        return myConceptBitwiseOrExpression;
      case LanguageConceptSwitch.BitwiseRightExpression:
        return myConceptBitwiseRightExpression;
      case LanguageConceptSwitch.BitwiseXorExpression:
        return myConceptBitwiseXorExpression;
      case LanguageConceptSwitch.BoolLiteral:
        return myConceptBoolLiteral;
      case LanguageConceptSwitch.BoolType:
        return myConceptBoolType;
      case LanguageConceptSwitch.BuiltInIsExpression:
        return myConceptBuiltInIsExpression;
      case LanguageConceptSwitch.BuiltInType:
        return myConceptBuiltInType;
      case LanguageConceptSwitch.ByteType:
        return myConceptByteType;
      case LanguageConceptSwitch.CharLiteral:
        return myConceptCharLiteral;
      case LanguageConceptSwitch.CharType:
        return myConceptCharType;
      case LanguageConceptSwitch.CheckedExpression:
        return myConceptCheckedExpression;
      case LanguageConceptSwitch.CheckedOrUncheckedExpression:
        return myConceptCheckedOrUncheckedExpression;
      case LanguageConceptSwitch.CommaConstant:
        return myConceptCommaConstant;
      case LanguageConceptSwitch.ConstantUtility:
        return myConceptConstantUtility;
      case LanguageConceptSwitch.DecimalType:
        return myConceptDecimalType;
      case LanguageConceptSwitch.DivisionExpression:
        return myConceptDivisionExpression;
      case LanguageConceptSwitch.DoubleType:
        return myConceptDoubleType;
      case LanguageConceptSwitch.DummyExpression:
        return myConceptDummyExpression;
      case LanguageConceptSwitch.DummyUnaryExpression:
        return myConceptDummyUnaryExpression;
      case LanguageConceptSwitch.EmptyArrayInitializer:
        return myConceptEmptyArrayInitializer;
      case LanguageConceptSwitch.EqualsExpression:
        return myConceptEqualsExpression;
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.ExpressionInBraces:
        return myConceptExpressionInBraces;
      case LanguageConceptSwitch.ExpressionList:
        return myConceptExpressionList;
      case LanguageConceptSwitch.ExpressionListExpression:
        return myConceptExpressionListExpression;
      case LanguageConceptSwitch.ExpressionTest:
        return myConceptExpressionTest;
      case LanguageConceptSwitch.FloatType:
        return myConceptFloatType;
      case LanguageConceptSwitch.FunctionCallExpression:
        return myConceptFunctionCallExpression;
      case LanguageConceptSwitch.GreaterThanExpression:
        return myConceptGreaterThanExpression;
      case LanguageConceptSwitch.GreaterThanOrEqualToExpression:
        return myConceptGreaterThanOrEqualToExpression;
      case LanguageConceptSwitch.Identifier:
        return myConceptIdentifier;
      case LanguageConceptSwitch.IntLiteral:
        return myConceptIntLiteral;
      case LanguageConceptSwitch.IntType:
        return myConceptIntType;
      case LanguageConceptSwitch.IsExpression:
        return myConceptIsExpression;
      case LanguageConceptSwitch.LessThanExpression:
        return myConceptLessThanExpression;
      case LanguageConceptSwitch.LessThanOrEqualToExpression:
        return myConceptLessThanOrEqualToExpression;
      case LanguageConceptSwitch.Literal:
        return myConceptLiteral;
      case LanguageConceptSwitch.LongType:
        return myConceptLongType;
      case LanguageConceptSwitch.MinusExpression:
        return myConceptMinusExpression;
      case LanguageConceptSwitch.ModuloExpression:
        return myConceptModuloExpression;
      case LanguageConceptSwitch.MultiplicationExpression:
        return myConceptMultiplicationExpression;
      case LanguageConceptSwitch.NewArrayTypeExpression:
        return myConceptNewArrayTypeExpression;
      case LanguageConceptSwitch.NewNonArrayExpression:
        return myConceptNewNonArrayExpression;
      case LanguageConceptSwitch.NewTypeExpression:
        return myConceptNewTypeExpression;
      case LanguageConceptSwitch.NonArrayType:
        return myConceptNonArrayType;
      case LanguageConceptSwitch.NonEmptyArrayInitializer:
        return myConceptNonEmptyArrayInitializer;
      case LanguageConceptSwitch.NotEqualsExpression:
        return myConceptNotEqualsExpression;
      case LanguageConceptSwitch.NullCoalescingExpression:
        return myConceptNullCoalescingExpression;
      case LanguageConceptSwitch.NullLiteral:
        return myConceptNullLiteral;
      case LanguageConceptSwitch.ObjectType:
        return myConceptObjectType;
      case LanguageConceptSwitch.OrExpression:
        return myConceptOrExpression;
      case LanguageConceptSwitch.OutConstant:
        return myConceptOutConstant;
      case LanguageConceptSwitch.PlusExpression:
        return myConceptPlusExpression;
      case LanguageConceptSwitch.PostDecrementExpression:
        return myConceptPostDecrementExpression;
      case LanguageConceptSwitch.PostIncrementExpression:
        return myConceptPostIncrementExpression;
      case LanguageConceptSwitch.PreDecrementExpression:
        return myConceptPreDecrementExpression;
      case LanguageConceptSwitch.PreIncrementExpression:
        return myConceptPreIncrementExpression;
      case LanguageConceptSwitch.PredefinedDotExpression:
        return myConceptPredefinedDotExpression;
      case LanguageConceptSwitch.PrimaryDotExpression:
        return myConceptPrimaryDotExpression;
      case LanguageConceptSwitch.PrimaryExpression:
        return myConceptPrimaryExpression;
      case LanguageConceptSwitch.QualifiedIdentifier:
        return myConceptQualifiedIdentifier;
      case LanguageConceptSwitch.RankSpecifier:
        return myConceptRankSpecifier;
      case LanguageConceptSwitch.RealLiteral:
        return myConceptRealLiteral;
      case LanguageConceptSwitch.RefConstant:
        return myConceptRefConstant;
      case LanguageConceptSwitch.RefOutConstant:
        return myConceptRefOutConstant;
      case LanguageConceptSwitch.SByteType:
        return myConceptSByteType;
      case LanguageConceptSwitch.ShortType:
        return myConceptShortType;
      case LanguageConceptSwitch.StringLiteral:
        return myConceptStringLiteral;
      case LanguageConceptSwitch.StringType:
        return myConceptStringType;
      case LanguageConceptSwitch.TernaryOperatorExpression:
        return myConceptTernaryOperatorExpression;
      case LanguageConceptSwitch.ThisExpression:
        return myConceptThisExpression;
      case LanguageConceptSwitch.Type:
        return myConceptType;
      case LanguageConceptSwitch.TypeTypeOf:
        return myConceptTypeTypeOf;
      case LanguageConceptSwitch.UIntType:
        return myConceptUIntType;
      case LanguageConceptSwitch.ULongType:
        return myConceptULongType;
      case LanguageConceptSwitch.UShortType:
        return myConceptUShortType;
      case LanguageConceptSwitch.UnaryDereferenceExpression:
        return myConceptUnaryDereferenceExpression;
      case LanguageConceptSwitch.UnaryExpression:
        return myConceptUnaryExpression;
      case LanguageConceptSwitch.UnaryExpressionWithOperator:
        return myConceptUnaryExpressionWithOperator;
      case LanguageConceptSwitch.UnaryMinusExpression:
        return myConceptUnaryMinusExpression;
      case LanguageConceptSwitch.UnaryNotExpression:
        return myConceptUnaryNotExpression;
      case LanguageConceptSwitch.UnaryPlusExpression:
        return myConceptUnaryPlusExpression;
      case LanguageConceptSwitch.UnaryTildaExpression:
        return myConceptUnaryTildaExpression;
      case LanguageConceptSwitch.UnaryTypedExpression:
        return myConceptUnaryTypedExpression;
      case LanguageConceptSwitch.UncheckedExpression:
        return myConceptUncheckedExpression;
      case LanguageConceptSwitch.VariableInitializer:
        return myConceptVariableInitializer;
      case LanguageConceptSwitch.VoidTypeOf:
        return myConceptVoidTypeOf;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAndExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "AndExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5a473L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190656627");
    b.version(2);
    b.alias("&&");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArgument() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "Argument", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09d3L);
    b.class_(false, false, false);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191075795");
    b.version(2);
    b.aggregate("keyword", 0x5ef9203ea4cc09f3L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09f0L).optional(true).ordered(true).multiple(false).origin("6843536562191075827").done();
    b.aggregate("expression", 0x5ef9203ea4cc09f5L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL).optional(false).ordered(true).multiple(false).origin("6843536562191075829").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArgumentsList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "ArgumentsList", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09d2L);
    b.class_(false, false, false);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191075794");
    b.version(2);
    b.aggregate("argument", 0x5ef9203ea4cc09d4L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09d3L).optional(true).ordered(true).multiple(true).origin("6843536562191075796").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArrayInitializer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "ArrayInitializer", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96584L);
    b.class_(false, true, false);
    b.super_("CsBaseLanguage.structure.VariableInitializer", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96594L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190902660");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAsOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "AsOperator", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5d9aaL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190670250");
    b.version(2);
    b.alias("as");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBaseAccessExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "BaseAccessExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cd14eeL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191144174");
    b.version(2);
    b.aggregate("identifier", 0x5ef9203ea4cd14efL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cae6bbL).optional(false).ordered(true).multiple(false).origin("6843536562191144175").done();
    b.alias("base");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.class_(false, true, false);
    b.super_("CsBaseLanguage.structure.Expression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190653623");
    b.version(2);
    b.aggregate("rightExpression", 0x5ef9203ea4c598baL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL).optional(false).ordered(true).multiple(false).origin("6843536562190653626").done();
    b.aggregate("leftExpression", 0x5ef9203ea4c598bcL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL).optional(false).ordered(true).multiple(false).origin("6843536562190653628").done();
    b.alias("<?>");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBitwiseAndExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "BitwiseAndExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5b0a8L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190659752");
    b.version(2);
    b.alias("&");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBitwiseLeftShiftExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "BitwiseLeftShiftExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6572aL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190702378");
    b.version(2);
    b.alias("<<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBitwiseOrExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "BitwiseOrExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5b0a7L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190659751");
    b.version(2);
    b.alias("|");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBitwiseRightExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "BitwiseRightExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6572bL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190702379");
    b.version(2);
    b.alias(">>");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBitwiseXorExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "BitwiseXorExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5bd67L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190663015");
    b.version(2);
    b.alias("^");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBoolLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "BoolLiteral", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99edL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.Literal", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99e6L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190981613");
    b.version(2);
    b.alias("BoolLiteral");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBoolType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "BoolType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c639bcL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190694844");
    b.version(2);
    b.alias("bool");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBuiltInIsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "BuiltInIsExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec43L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.Expression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190675011");
    b.version(2);
    b.aggregate("expression", 0x5ef9203ea4c5ec44L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL).optional(false).ordered(true).multiple(false).origin("6843536562190675012").done();
    b.aggregate("builtInType", 0x5ef9203ea4c5ec46L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L).optional(false).ordered(true).multiple(false).origin("6843536562190675014").done();
    b.alias("is");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBuiltInType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.class_(false, true, false);
    b.super_("CsBaseLanguage.structure.NonArrayType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c706b6L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190675017");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForByteType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "ByteType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c601b5L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190680501");
    b.version(2);
    b.alias("byte");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCharLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "CharLiteral", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99f6L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.Literal", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99e6L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190981622");
    b.version(2);
    b.alias("CharLiteral");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCharType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "CharType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c601bcL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190680508");
    b.version(2);
    b.alias("char");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCheckedExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "CheckedExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cf0c49L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.CheckedOrUncheckedExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cf0c0cL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191273033");
    b.version(2);
    b.alias("checked");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCheckedOrUncheckedExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "CheckedOrUncheckedExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cf0c0cL);
    b.class_(false, true, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191272972");
    b.version(2);
    b.aggregate("expression", 0x5ef9203ea4cf0c0fL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL).optional(false).ordered(true).multiple(false).origin("6843536562191272975").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCommaConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "CommaConstant", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c75645L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.ConstantUtility", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09e7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190767685");
    b.version(2);
    b.alias(",");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstantUtility() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "ConstantUtility", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09e7L);
    b.class_(false, true, false);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191075815");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDecimalType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "DecimalType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c639bdL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190694845");
    b.version(2);
    b.alias("decimal");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDivisionExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "DivisionExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6753bL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190710075");
    b.version(2);
    b.alias("/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDoubleType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "DoubleType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c639beL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190694846");
    b.version(2);
    b.alias("double");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDummyExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "DummyExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c576a5L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.Expression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190644901");
    b.version(2);
    b.alias("dummy");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDummyUnaryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "DummyUnaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6dc24L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.UnaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b660L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190736420");
    b.version(2);
    b.alias("uDummy");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptyArrayInitializer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "EmptyArrayInitializer", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96587L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.ArrayInitializer", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96584L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190902663");
    b.version(2);
    b.alias("{}");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEqualsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "EqualsExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5cb11L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190666513");
    b.version(2);
    b.alias("==");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "Expression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL);
    b.class_(false, true, false);
    b.super_("CsBaseLanguage.structure.VariableInitializer", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96594L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190617628");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpressionInBraces() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "ExpressionInBraces", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cb2b4aL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191018826");
    b.version(2);
    b.aggregate("expression", 0x5ef9203ea4cb2b4bL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL).optional(false).ordered(true).multiple(false).origin("6843536562191018827").done();
    b.alias("(expr)");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpressionList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "ExpressionList", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c965c9L);
    b.class_(false, false, false);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190902729");
    b.version(2);
    b.aggregate("expression", 0x5ef9203ea4c965caL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL).optional(false).ordered(true).multiple(true).origin("6843536562190902730").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpressionListExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "ExpressionListExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc6191L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191098257");
    b.version(2);
    b.aggregate("primaryExpression", 0x5ef9203ea4cc6192L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL).optional(false).ordered(true).multiple(false).origin("6843536562191098258").done();
    b.aggregate("expressionList", 0x5ef9203ea4cc6194L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c965c9L).optional(false).ordered(true).multiple(false).origin("6843536562191098260").done();
    b.alias("expr[list]");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpressionTest() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "ExpressionTest", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c56f65L);
    b.class_(false, false, true);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190643045");
    b.version(2);
    b.aggregate("member", 0x5ef9203ea4c56f66L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL).optional(true).ordered(true).multiple(true).origin("6843536562190643046").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFloatType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "FloatType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c639bfL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190694847");
    b.version(2);
    b.alias("float");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunctionCallExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "FunctionCallExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09ccL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191075788");
    b.version(2);
    b.aggregate("primaryExpression", 0x5ef9203ea4cc09cdL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL).optional(false).ordered(true).multiple(false).origin("6843536562191075789").done();
    b.aggregate("argumentsList", 0x5ef9203ea4cc09cfL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09d2L).optional(false).ordered(true).multiple(false).origin("6843536562191075791").done();
    b.alias("expr(args)");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThanExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "GreaterThanExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5d9a6L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190670246");
    b.version(2);
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThanOrEqualToExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "GreaterThanOrEqualToExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5d9a8L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190670248");
    b.version(2);
    b.alias(">=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIdentifier() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "Identifier", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cae6bbL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191001275");
    b.version(2);
    b.alias("identifier");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "IntLiteral", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99eeL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.Literal", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99e6L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190981614");
    b.version(2);
    b.alias("IntLiteral");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "IntType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c601b8L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190680504");
    b.version(2);
    b.alias("int");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "IsExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5d9a9L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190670249");
    b.version(2);
    b.alias("is");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessThanExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "LessThanExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5d9a5L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190670245");
    b.version(2);
    b.alias("<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessThanOrEqualToExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "LessThanOrEqualToExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5d9a7L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190670247");
    b.version(2);
    b.alias("<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "Literal", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99e6L);
    b.class_(false, true, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190981606");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLongType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "LongType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c601baL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190680506");
    b.version(2);
    b.alias("long");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMinusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "MinusExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c67539L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190710073");
    b.version(2);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForModuloExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "ModuloExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6753cL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190710076");
    b.version(2);
    b.alias("%");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultiplicationExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "MultiplicationExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6753aL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190710074");
    b.version(2);
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNewArrayTypeExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "NewArrayTypeExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca181eL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190948382");
    b.version(2);
    b.aggregate("type", 0x5ef9203ea4ca181fL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c706b6L).optional(false).ordered(true).multiple(false).origin("6843536562190948383").done();
    b.aggregate("rankSpecifier", 0x5ef9203ea4ca1821L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c75642L).optional(false).ordered(true).multiple(true).origin("6843536562190948385").done();
    b.aggregate("arrayInitializer", 0x5ef9203ea4ca1824L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96584L).optional(false).ordered(true).multiple(false).origin("6843536562190948388").done();
    b.alias("new");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNewNonArrayExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "NewNonArrayExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96575L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190902645");
    b.version(2);
    b.aggregate("type", 0x5ef9203ea4c96576L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c706b6L).optional(false).ordered(true).multiple(false).origin("6843536562190902646").done();
    b.aggregate("expressionList", 0x5ef9203ea4c96578L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c965c9L).optional(false).ordered(true).multiple(false).origin("6843536562190902648").done();
    b.aggregate("rankSpecifier", 0x5ef9203ea4c9657bL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c75642L).optional(true).ordered(true).multiple(true).origin("6843536562190902651").done();
    b.aggregate("arrayInitializer", 0x5ef9203ea4c9657fL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96584L).optional(true).ordered(true).multiple(false).origin("6843536562190902655").done();
    b.alias("new");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNewTypeExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "NewTypeExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cdd285L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191192709");
    b.version(2);
    b.aggregate("type", 0x5ef9203ea4cdd286L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c706b6L).optional(false).ordered(true).multiple(false).origin("6843536562191192710").done();
    b.aggregate("rankSpecifier", 0x5ef9203ea4cdd288L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c75642L).optional(true).ordered(true).multiple(true).origin("6843536562191192712").done();
    b.aggregate("argumentsList", 0x5ef9203ea4cdd28bL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09d2L).optional(false).ordered(true).multiple(false).origin("6843536562191192715").done();
    b.alias("new");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNonArrayType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "NonArrayType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c706b6L);
    b.class_(false, true, false);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190747318");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNonEmptyArrayInitializer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "NonEmptyArrayInitializer", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96597L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.ArrayInitializer", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96584L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190902679");
    b.version(2);
    b.aggregate("varibaleInitializer", 0x5ef9203ea4c96598L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96594L).optional(false).ordered(true).multiple(true).origin("6843536562190902680").done();
    b.alias("{init}");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotEqualsExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "NotEqualsExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5cb12L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190666514");
    b.version(2);
    b.alias("!=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNullCoalescingExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "NullCoalescingExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5bd68L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190663016");
    b.version(2);
    b.alias("??");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNullLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "NullLiteral", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99f8L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.Literal", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99e6L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190981624");
    b.version(2);
    b.alias("null");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForObjectType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "ObjectType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c61ee8L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190687976");
    b.version(2);
    b.alias("object");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOrExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "OrExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b6L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190653622");
    b.version(2);
    b.alias("||");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOutConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "OutConstant", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09efL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.RefOutConstant", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09f0L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191075823");
    b.version(2);
    b.alias("out");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "PlusExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c67538L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BinaryOperation", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190710072");
    b.version(2);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPostDecrementExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "PostDecrementExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cd70e4L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191167716");
    b.version(2);
    b.aggregate("primaryExpression", 0x5ef9203ea4cd70e5L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL).optional(false).ordered(true).multiple(false).origin("6843536562191167717").done();
    b.alias("--");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPostIncrementExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "PostIncrementExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cd70b6L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191167670");
    b.version(2);
    b.aggregate("primaryExpression", 0x5ef9203ea4cd70b7L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL).optional(false).ordered(true).multiple(false).origin("6843536562191167671").done();
    b.alias("++");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPreDecrementExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "PreDecrementExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b67dL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.UnaryExpressionWithOperator", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b663L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190726781");
    b.version(2);
    b.alias("--");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPreIncrementExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "PreIncrementExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b67cL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.UnaryExpressionWithOperator", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b663L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190726780");
    b.version(2);
    b.alias("++");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPredefinedDotExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "PredefinedDotExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cb70c8L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191036616");
    b.version(2);
    b.aggregate("type", 0x5ef9203ea4cb70c9L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L).optional(false).ordered(true).multiple(false).origin("6843536562191036617").done();
    b.aggregate("identifier", 0x5ef9203ea4cb70cbL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cae6bbL).optional(false).ordered(true).multiple(false).origin("6843536562191036619").done();
    b.alias(".");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPrimaryDotExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "PrimaryDotExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cb709eL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191036574");
    b.version(2);
    b.aggregate("primaryExpression", 0x5ef9203ea4cb709fL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL).optional(false).ordered(true).multiple(false).origin("6843536562191036575").done();
    b.aggregate("identifier", 0x5ef9203ea4cb70a1L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cae6bbL).optional(false).ordered(true).multiple(false).origin("6843536562191036577").done();
    b.alias(".");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPrimaryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.class_(false, true, false);
    b.super_("CsBaseLanguage.structure.UnaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b660L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190890972");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForQualifiedIdentifier() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "QualifiedIdentifier", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c90810L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.NonArrayType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c706b6L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190878736");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRankSpecifier() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "RankSpecifier", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c75642L);
    b.class_(false, false, false);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190767682");
    b.version(2);
    b.aggregate("comma", 0x5ef9203ea4c75643L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c75645L).optional(true).ordered(true).multiple(true).origin("6843536562190767683").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRealLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "RealLiteral", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99f5L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.Literal", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99e6L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190981621");
    b.version(2);
    b.alias("RealLiteral");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRefConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "RefConstant", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09eeL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.RefOutConstant", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09f0L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191075822");
    b.version(2);
    b.alias("ref");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRefOutConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "RefOutConstant", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09f0L);
    b.class_(false, true, false);
    b.super_("CsBaseLanguage.structure.ConstantUtility", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09e7L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191075824");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSByteType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "SByteType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec7bL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190675067");
    b.version(2);
    b.alias("sbyte");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForShortType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "ShortType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c601b6L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190680502");
    b.version(2);
    b.alias("short");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "StringLiteral", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99f7L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.Literal", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99e6L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190981623");
    b.version(2);
    b.alias("StringLiteral");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "StringType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c61ee9L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190687977");
    b.version(2);
    b.alias("string");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTernaryOperatorExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "TernaryOperatorExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1fL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.Expression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190617631");
    b.version(2);
    b.aggregate("condition", 0x5ef9203ea4c50c20L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL).optional(false).ordered(true).multiple(false).origin("6843536562190617632").done();
    b.aggregate("ifTrue", 0x5ef9203ea4c50c22L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL).optional(false).ordered(true).multiple(false).origin("6843536562190617634").done();
    b.aggregate("ifFalse", 0x5ef9203ea4c50c25L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL).optional(false).ordered(true).multiple(false).origin("6843536562190617637").done();
    b.alias("expr ? expr : expr");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForThisExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "ThisExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ccba7eL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191121022");
    b.version(2);
    b.alias("this");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "Type", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c72d7fL);
    b.class_(false, false, false);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190757247");
    b.version(2);
    b.aggregate("nonArrayType", 0x5ef9203ea4c75640L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c706b6L).optional(false).ordered(true).multiple(false).origin("6843536562190767680").done();
    b.aggregate("rankSpecifier", 0x5ef9203ea4c75681L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c75642L).optional(true).ordered(true).multiple(true).origin("6843536562190767745").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTypeTypeOf() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "TypeTypeOf", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ce37e6L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191218662");
    b.version(2);
    b.aggregate("type", 0x5ef9203ea4ce37e7L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c706b6L).optional(false).ordered(true).multiple(false).origin("6843536562191218663").done();
    b.aggregate("rankSpecifier", 0x5ef9203ea4ce37e9L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c75642L).optional(true).ordered(true).multiple(true).origin("6843536562191218665").done();
    b.alias("typeof");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUIntType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "UIntType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c601b9L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190680505");
    b.version(2);
    b.alias("uint");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForULongType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "ULongType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c601bbL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190680507");
    b.version(2);
    b.alias("ulong");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUShortType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "UShortType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c601b7L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.BuiltInType", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190680503");
    b.version(2);
    b.alias("ushort");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryDereferenceExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "UnaryDereferenceExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b680L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.UnaryExpressionWithOperator", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b663L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190726784");
    b.version(2);
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "UnaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b660L);
    b.class_(false, true, false);
    b.super_("CsBaseLanguage.structure.Expression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1cL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190726752");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryExpressionWithOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "UnaryExpressionWithOperator", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b663L);
    b.class_(false, true, false);
    b.super_("CsBaseLanguage.structure.UnaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b660L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190726755");
    b.version(2);
    b.aggregate("expression", 0x5ef9203ea4c6b668L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b660L).optional(false).ordered(true).multiple(false).origin("6843536562190726760").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryMinusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "UnaryMinusExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b67bL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.UnaryExpressionWithOperator", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b663L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190726779");
    b.version(2);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryNotExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "UnaryNotExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b67eL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.UnaryExpressionWithOperator", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b663L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190726782");
    b.version(2);
    b.alias("!");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryPlusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "UnaryPlusExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b67aL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.UnaryExpressionWithOperator", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b663L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190726778");
    b.version(2);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryTildaExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "UnaryTildaExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b67fL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.UnaryExpressionWithOperator", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b663L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190726783");
    b.version(2);
    b.alias("~");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryTypedExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "UnaryTypedExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c72d7cL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.UnaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b660L);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190757244");
    b.version(2);
    b.aggregate("type", 0x5ef9203ea4c72d7dL).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c72d7fL).optional(false).ordered(true).multiple(false).origin("6843536562190757245").done();
    b.aggregate("expression", 0x5ef9203ea4c72d82L).target(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b660L).optional(false).ordered(true).multiple(false).origin("6843536562190757250").done();
    b.alias("(type) uExpr");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUncheckedExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "UncheckedExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cf0c4aL);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.CheckedOrUncheckedExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cf0c0cL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191273034");
    b.version(2);
    b.alias("unchecked");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariableInitializer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "VariableInitializer", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96594L);
    b.class_(false, true, false);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562190902676");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVoidTypeOf() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CsBaseLanguage", "VoidTypeOf", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cea058L);
    b.class_(false, false, false);
    b.super_("CsBaseLanguage.structure.PrimaryExpression", 0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c937dcL);
    b.origin("r:95fc96a8-27f5-4ee9-87a9-d1035329badc(CsBaseLanguage.structure)/6843536562191245400");
    b.version(2);
    b.alias("typeof");
    return b.create();
  }
}
