package CsBaseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AndAssignExpression = 0;
  public static final int AndExpression = 1;
  public static final int Argument = 2;
  public static final int ArgumentsList = 3;
  public static final int ArrayInitializer = 4;
  public static final int AsOperator = 5;
  public static final int AssignExpression = 6;
  public static final int AssignmentExpression = 7;
  public static final int BaseAccessExpression = 8;
  public static final int BinaryOperation = 9;
  public static final int BitwiseAndExpression = 10;
  public static final int BitwiseLeftShiftExpression = 11;
  public static final int BitwiseOrExpression = 12;
  public static final int BitwiseRightExpression = 13;
  public static final int BitwiseXorExpression = 14;
  public static final int BoolLiteral = 15;
  public static final int BoolType = 16;
  public static final int BuiltInClassType = 17;
  public static final int BuiltInIsExpression = 18;
  public static final int BuiltInType = 19;
  public static final int ByteType = 20;
  public static final int CharLiteral = 21;
  public static final int CharType = 22;
  public static final int CheckedExpression = 23;
  public static final int CheckedOrUncheckedExpression = 24;
  public static final int CommaConstant = 25;
  public static final int ConstantUtility = 26;
  public static final int DecimalType = 27;
  public static final int DivideAssignExpression = 28;
  public static final int DivisionExpression = 29;
  public static final int DoubleType = 30;
  public static final int DummyExpression = 31;
  public static final int DummyUnaryExpression = 32;
  public static final int EqualsExpression = 33;
  public static final int Expression = 34;
  public static final int ExpressionInBraces = 35;
  public static final int ExpressionList = 36;
  public static final int ExpressionListExpression = 37;
  public static final int ExpressionTest = 38;
  public static final int FloatType = 39;
  public static final int FunctionCallExpression = 40;
  public static final int GreaterThanExpression = 41;
  public static final int GreaterThanOrEqualToExpression = 42;
  public static final int Identifier = 43;
  public static final int IntLiteral = 44;
  public static final int IntType = 45;
  public static final int IntegralType = 46;
  public static final int IsExpression = 47;
  public static final int LeftShiftAssignExpression = 48;
  public static final int LessThanExpression = 49;
  public static final int LessThanOrEqualToExpression = 50;
  public static final int Literal = 51;
  public static final int LongType = 52;
  public static final int MinusAssignExpression = 53;
  public static final int MinusExpression = 54;
  public static final int ModuloAssignExpression = 55;
  public static final int ModuloExpression = 56;
  public static final int MultiplicationExpression = 57;
  public static final int MultiplyAssignExpression = 58;
  public static final int NewArrayTypeExpression = 59;
  public static final int NewNonArrayExpression = 60;
  public static final int NewTypeExpression = 61;
  public static final int NonArrayType = 62;
  public static final int NotEqualsExpression = 63;
  public static final int NullCoalescingExpression = 64;
  public static final int NullLiteral = 65;
  public static final int ObjectType = 66;
  public static final int OrAssignExpression = 67;
  public static final int OrExpression = 68;
  public static final int OutConstant = 69;
  public static final int PlusAssignExpression = 70;
  public static final int PlusExpression = 71;
  public static final int PostDecrementExpression = 72;
  public static final int PostIncrementExpression = 73;
  public static final int PreDecrementExpression = 74;
  public static final int PreIncrementExpression = 75;
  public static final int PredefinedDotExpression = 76;
  public static final int PrimaryDotExpression = 77;
  public static final int PrimaryExpression = 78;
  public static final int QualifiedIdentifier = 79;
  public static final int RankSpecifier = 80;
  public static final int RealLiteral = 81;
  public static final int RefConstant = 82;
  public static final int RefOutConstant = 83;
  public static final int RightShiftAssignExpression = 84;
  public static final int SByteType = 85;
  public static final int ShortType = 86;
  public static final int StringLiteral = 87;
  public static final int StringType = 88;
  public static final int TernaryOperatorExpression = 89;
  public static final int ThisExpression = 90;
  public static final int Type = 91;
  public static final int TypeOf = 92;
  public static final int TypeOrVoid = 93;
  public static final int UIntType = 94;
  public static final int ULongType = 95;
  public static final int UShortType = 96;
  public static final int UnaryDereferenceExpression = 97;
  public static final int UnaryExpression = 98;
  public static final int UnaryExpressionWithOperator = 99;
  public static final int UnaryMinusExpression = 100;
  public static final int UnaryNotExpression = 101;
  public static final int UnaryPlusExpression = 102;
  public static final int UnaryTildeExpression = 103;
  public static final int UnaryTypedExpression = 104;
  public static final int UncheckedExpression = 105;
  public static final int VariableInitializer = 106;
  public static final int VoidType = 107;
  public static final int XorAssignExpression = 108;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L);
    builder.put(0x2b6e5dd872dba806L, AndAssignExpression);
    builder.put(0x5ef9203ea4c5a473L, AndExpression);
    builder.put(0x5ef9203ea4cc09d3L, Argument);
    builder.put(0x5ef9203ea4cc09d2L, ArgumentsList);
    builder.put(0x5ef9203ea4c96597L, ArrayInitializer);
    builder.put(0x5ef9203ea4c5d9aaL, AsOperator);
    builder.put(0x2b6e5dd872dba800L, AssignExpression);
    builder.put(0x2b6e5dd872dba7daL, AssignmentExpression);
    builder.put(0x5ef9203ea4cd14eeL, BaseAccessExpression);
    builder.put(0x5ef9203ea4c598b7L, BinaryOperation);
    builder.put(0x5ef9203ea4c5b0a8L, BitwiseAndExpression);
    builder.put(0x5ef9203ea4c6572aL, BitwiseLeftShiftExpression);
    builder.put(0x5ef9203ea4c5b0a7L, BitwiseOrExpression);
    builder.put(0x5ef9203ea4c6572bL, BitwiseRightExpression);
    builder.put(0x5ef9203ea4c5bd67L, BitwiseXorExpression);
    builder.put(0x5ef9203ea4ca99edL, BoolLiteral);
    builder.put(0x5ef9203ea4c639bcL, BoolType);
    builder.put(0x2b6e5dd872b656b4L, BuiltInClassType);
    builder.put(0x5ef9203ea4c5ec43L, BuiltInIsExpression);
    builder.put(0x5ef9203ea4c5ec49L, BuiltInType);
    builder.put(0x5ef9203ea4c601b5L, ByteType);
    builder.put(0x5ef9203ea4ca99f6L, CharLiteral);
    builder.put(0x5ef9203ea4c601bcL, CharType);
    builder.put(0x5ef9203ea4cf0c49L, CheckedExpression);
    builder.put(0x5ef9203ea4cf0c0cL, CheckedOrUncheckedExpression);
    builder.put(0x5ef9203ea4c75645L, CommaConstant);
    builder.put(0x5ef9203ea4cc09e7L, ConstantUtility);
    builder.put(0x5ef9203ea4c639bdL, DecimalType);
    builder.put(0x2b6e5dd872dba804L, DivideAssignExpression);
    builder.put(0x5ef9203ea4c6753bL, DivisionExpression);
    builder.put(0x5ef9203ea4c639beL, DoubleType);
    builder.put(0x5ef9203ea4c576a5L, DummyExpression);
    builder.put(0x5ef9203ea4c6dc24L, DummyUnaryExpression);
    builder.put(0x5ef9203ea4c5cb11L, EqualsExpression);
    builder.put(0x5ef9203ea4c50c1cL, Expression);
    builder.put(0x5ef9203ea4cb2b4aL, ExpressionInBraces);
    builder.put(0x5ef9203ea4c965c9L, ExpressionList);
    builder.put(0x5ef9203ea4cc6191L, ExpressionListExpression);
    builder.put(0x5ef9203ea4c56f65L, ExpressionTest);
    builder.put(0x5ef9203ea4c639bfL, FloatType);
    builder.put(0x5ef9203ea4cc09ccL, FunctionCallExpression);
    builder.put(0x5ef9203ea4c5d9a6L, GreaterThanExpression);
    builder.put(0x5ef9203ea4c5d9a8L, GreaterThanOrEqualToExpression);
    builder.put(0x5ef9203ea4cae6bbL, Identifier);
    builder.put(0x5ef9203ea4ca99eeL, IntLiteral);
    builder.put(0x5ef9203ea4c601b8L, IntType);
    builder.put(0x2b6e5dd872b656b1L, IntegralType);
    builder.put(0x5ef9203ea4c5d9a9L, IsExpression);
    builder.put(0x2b6e5dd872dba809L, LeftShiftAssignExpression);
    builder.put(0x5ef9203ea4c5d9a5L, LessThanExpression);
    builder.put(0x5ef9203ea4c5d9a7L, LessThanOrEqualToExpression);
    builder.put(0x5ef9203ea4ca99e6L, Literal);
    builder.put(0x5ef9203ea4c601baL, LongType);
    builder.put(0x2b6e5dd872dba802L, MinusAssignExpression);
    builder.put(0x5ef9203ea4c67539L, MinusExpression);
    builder.put(0x2b6e5dd872dba805L, ModuloAssignExpression);
    builder.put(0x5ef9203ea4c6753cL, ModuloExpression);
    builder.put(0x5ef9203ea4c6753aL, MultiplicationExpression);
    builder.put(0x2b6e5dd872dba803L, MultiplyAssignExpression);
    builder.put(0x5ef9203ea4ca181eL, NewArrayTypeExpression);
    builder.put(0x5ef9203ea4c96575L, NewNonArrayExpression);
    builder.put(0x5ef9203ea4cdd285L, NewTypeExpression);
    builder.put(0x5ef9203ea4c706b6L, NonArrayType);
    builder.put(0x5ef9203ea4c5cb12L, NotEqualsExpression);
    builder.put(0x5ef9203ea4c5bd68L, NullCoalescingExpression);
    builder.put(0x5ef9203ea4ca99f8L, NullLiteral);
    builder.put(0x5ef9203ea4c61ee8L, ObjectType);
    builder.put(0x2b6e5dd872dba807L, OrAssignExpression);
    builder.put(0x5ef9203ea4c598b6L, OrExpression);
    builder.put(0x5ef9203ea4cc09efL, OutConstant);
    builder.put(0x2b6e5dd872dba801L, PlusAssignExpression);
    builder.put(0x5ef9203ea4c67538L, PlusExpression);
    builder.put(0x5ef9203ea4cd70e4L, PostDecrementExpression);
    builder.put(0x5ef9203ea4cd70b6L, PostIncrementExpression);
    builder.put(0x5ef9203ea4c6b67dL, PreDecrementExpression);
    builder.put(0x5ef9203ea4c6b67cL, PreIncrementExpression);
    builder.put(0x5ef9203ea4cb70c8L, PredefinedDotExpression);
    builder.put(0x5ef9203ea4cb709eL, PrimaryDotExpression);
    builder.put(0x5ef9203ea4c937dcL, PrimaryExpression);
    builder.put(0x5ef9203ea4c90810L, QualifiedIdentifier);
    builder.put(0x5ef9203ea4c75642L, RankSpecifier);
    builder.put(0x5ef9203ea4ca99f5L, RealLiteral);
    builder.put(0x5ef9203ea4cc09eeL, RefConstant);
    builder.put(0x5ef9203ea4cc09f0L, RefOutConstant);
    builder.put(0x2b6e5dd872dba80aL, RightShiftAssignExpression);
    builder.put(0x5ef9203ea4c5ec7bL, SByteType);
    builder.put(0x5ef9203ea4c601b6L, ShortType);
    builder.put(0x5ef9203ea4ca99f7L, StringLiteral);
    builder.put(0x5ef9203ea4c61ee9L, StringType);
    builder.put(0x5ef9203ea4c50c1fL, TernaryOperatorExpression);
    builder.put(0x5ef9203ea4ccba7eL, ThisExpression);
    builder.put(0x5ef9203ea4c72d7fL, Type);
    builder.put(0x5ef9203ea4ce37e6L, TypeOf);
    builder.put(0x2b6e5dd872da5248L, TypeOrVoid);
    builder.put(0x5ef9203ea4c601b9L, UIntType);
    builder.put(0x5ef9203ea4c601bbL, ULongType);
    builder.put(0x5ef9203ea4c601b7L, UShortType);
    builder.put(0x5ef9203ea4c6b680L, UnaryDereferenceExpression);
    builder.put(0x5ef9203ea4c6b660L, UnaryExpression);
    builder.put(0x5ef9203ea4c6b663L, UnaryExpressionWithOperator);
    builder.put(0x5ef9203ea4c6b67bL, UnaryMinusExpression);
    builder.put(0x5ef9203ea4c6b67eL, UnaryNotExpression);
    builder.put(0x5ef9203ea4c6b67aL, UnaryPlusExpression);
    builder.put(0x5ef9203ea4c6b67fL, UnaryTildeExpression);
    builder.put(0x5ef9203ea4c72d7cL, UnaryTypedExpression);
    builder.put(0x5ef9203ea4cf0c4aL, UncheckedExpression);
    builder.put(0x5ef9203ea4c96594L, VariableInitializer);
    builder.put(0x2b6e5dd872da524bL, VoidType);
    builder.put(0x2b6e5dd872dba808L, XorAssignExpression);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
