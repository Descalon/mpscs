package CsBaseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AndAssignExpression;
  private ConceptPresentation props_AndExpression;
  private ConceptPresentation props_Argument;
  private ConceptPresentation props_ArgumentsList;
  private ConceptPresentation props_ArrayInitializer;
  private ConceptPresentation props_AsOperator;
  private ConceptPresentation props_AssignExpression;
  private ConceptPresentation props_AssignmentExpression;
  private ConceptPresentation props_BaseAccessExpression;
  private ConceptPresentation props_BinaryOperation;
  private ConceptPresentation props_BitwiseAndExpression;
  private ConceptPresentation props_BitwiseLeftShiftExpression;
  private ConceptPresentation props_BitwiseOrExpression;
  private ConceptPresentation props_BitwiseRightExpression;
  private ConceptPresentation props_BitwiseXorExpression;
  private ConceptPresentation props_BoolLiteral;
  private ConceptPresentation props_BoolType;
  private ConceptPresentation props_BuiltInClassType;
  private ConceptPresentation props_BuiltInIsExpression;
  private ConceptPresentation props_BuiltInType;
  private ConceptPresentation props_ByteType;
  private ConceptPresentation props_CharLiteral;
  private ConceptPresentation props_CharType;
  private ConceptPresentation props_CheckedExpression;
  private ConceptPresentation props_CheckedOrUncheckedExpression;
  private ConceptPresentation props_CommaConstant;
  private ConceptPresentation props_ConstantUtility;
  private ConceptPresentation props_DecimalType;
  private ConceptPresentation props_DivideAssignExpression;
  private ConceptPresentation props_DivisionExpression;
  private ConceptPresentation props_DoubleType;
  private ConceptPresentation props_DummyExpression;
  private ConceptPresentation props_DummyUnaryExpression;
  private ConceptPresentation props_EqualsExpression;
  private ConceptPresentation props_Expression;
  private ConceptPresentation props_ExpressionInBraces;
  private ConceptPresentation props_ExpressionList;
  private ConceptPresentation props_ExpressionListExpression;
  private ConceptPresentation props_ExpressionTest;
  private ConceptPresentation props_FloatType;
  private ConceptPresentation props_FunctionCallExpression;
  private ConceptPresentation props_GreaterThanExpression;
  private ConceptPresentation props_GreaterThanOrEqualToExpression;
  private ConceptPresentation props_Identifier;
  private ConceptPresentation props_IntLiteral;
  private ConceptPresentation props_IntType;
  private ConceptPresentation props_IntegralType;
  private ConceptPresentation props_IsExpression;
  private ConceptPresentation props_LeftShiftAssignExpression;
  private ConceptPresentation props_LessThanExpression;
  private ConceptPresentation props_LessThanOrEqualToExpression;
  private ConceptPresentation props_Literal;
  private ConceptPresentation props_LongType;
  private ConceptPresentation props_MinusAssignExpression;
  private ConceptPresentation props_MinusExpression;
  private ConceptPresentation props_ModuloAssignExpression;
  private ConceptPresentation props_ModuloExpression;
  private ConceptPresentation props_MultiplicationExpression;
  private ConceptPresentation props_MultiplyAssignExpression;
  private ConceptPresentation props_NewArrayTypeExpression;
  private ConceptPresentation props_NewNonArrayExpression;
  private ConceptPresentation props_NewTypeExpression;
  private ConceptPresentation props_NonArrayType;
  private ConceptPresentation props_NotEqualsExpression;
  private ConceptPresentation props_NullCoalescingExpression;
  private ConceptPresentation props_NullLiteral;
  private ConceptPresentation props_ObjectType;
  private ConceptPresentation props_OrAssignExpression;
  private ConceptPresentation props_OrExpression;
  private ConceptPresentation props_OutConstant;
  private ConceptPresentation props_PlusAssignExpression;
  private ConceptPresentation props_PlusExpression;
  private ConceptPresentation props_PostDecrementExpression;
  private ConceptPresentation props_PostIncrementExpression;
  private ConceptPresentation props_PreDecrementExpression;
  private ConceptPresentation props_PreIncrementExpression;
  private ConceptPresentation props_PredefinedDotExpression;
  private ConceptPresentation props_PrimaryDotExpression;
  private ConceptPresentation props_PrimaryExpression;
  private ConceptPresentation props_QualifiedIdentifier;
  private ConceptPresentation props_RankSpecifier;
  private ConceptPresentation props_RealLiteral;
  private ConceptPresentation props_RefConstant;
  private ConceptPresentation props_RefOutConstant;
  private ConceptPresentation props_RightShiftAssignExpression;
  private ConceptPresentation props_SByteType;
  private ConceptPresentation props_ShortType;
  private ConceptPresentation props_StringLiteral;
  private ConceptPresentation props_StringType;
  private ConceptPresentation props_TernaryOperatorExpression;
  private ConceptPresentation props_ThisExpression;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_TypeOf;
  private ConceptPresentation props_TypeOrVoid;
  private ConceptPresentation props_UIntType;
  private ConceptPresentation props_ULongType;
  private ConceptPresentation props_UShortType;
  private ConceptPresentation props_UnaryDereferenceExpression;
  private ConceptPresentation props_UnaryExpression;
  private ConceptPresentation props_UnaryExpressionWithOperator;
  private ConceptPresentation props_UnaryMinusExpression;
  private ConceptPresentation props_UnaryNotExpression;
  private ConceptPresentation props_UnaryPlusExpression;
  private ConceptPresentation props_UnaryTildeExpression;
  private ConceptPresentation props_UnaryTypedExpression;
  private ConceptPresentation props_UncheckedExpression;
  private ConceptPresentation props_VariableInitializer;
  private ConceptPresentation props_VoidType;
  private ConceptPresentation props_XorAssignExpression;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AndAssignExpression:
        if (props_AndAssignExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("&=");
          props_AndAssignExpression = cpb.create();
        }
        return props_AndAssignExpression;
      case LanguageConceptSwitch.AndExpression:
        if (props_AndExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("logical AND");
          cpb.rawPresentation("&&");
          props_AndExpression = cpb.create();
        }
        return props_AndExpression;
      case LanguageConceptSwitch.Argument:
        if (props_Argument == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Argument");
          props_Argument = cpb.create();
        }
        return props_Argument;
      case LanguageConceptSwitch.ArgumentsList:
        if (props_ArgumentsList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ArgumentsList");
          props_ArgumentsList = cpb.create();
        }
        return props_ArgumentsList;
      case LanguageConceptSwitch.ArrayInitializer:
        if (props_ArrayInitializer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("array initializer");
          cpb.rawPresentation("{init}");
          props_ArrayInitializer = cpb.create();
        }
        return props_ArrayInitializer;
      case LanguageConceptSwitch.AsOperator:
        if (props_AsOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("as operator");
          cpb.rawPresentation("as");
          props_AsOperator = cpb.create();
        }
        return props_AsOperator;
      case LanguageConceptSwitch.AssignExpression:
        if (props_AssignExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("=");
          props_AssignExpression = cpb.create();
        }
        return props_AssignExpression;
      case LanguageConceptSwitch.AssignmentExpression:
        if (props_AssignmentExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AssignmentExpression = cpb.create();
        }
        return props_AssignmentExpression;
      case LanguageConceptSwitch.BaseAccessExpression:
        if (props_BaseAccessExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("access a memeber of the base class");
          cpb.rawPresentation("base");
          props_BaseAccessExpression = cpb.create();
        }
        return props_BaseAccessExpression;
      case LanguageConceptSwitch.BinaryOperation:
        if (props_BinaryOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("abstract binary operation");
          props_BinaryOperation = cpb.create();
        }
        return props_BinaryOperation;
      case LanguageConceptSwitch.BitwiseAndExpression:
        if (props_BitwiseAndExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("bitwise AND");
          cpb.rawPresentation("&");
          props_BitwiseAndExpression = cpb.create();
        }
        return props_BitwiseAndExpression;
      case LanguageConceptSwitch.BitwiseLeftShiftExpression:
        if (props_BitwiseLeftShiftExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("left shift");
          cpb.rawPresentation("<<");
          props_BitwiseLeftShiftExpression = cpb.create();
        }
        return props_BitwiseLeftShiftExpression;
      case LanguageConceptSwitch.BitwiseOrExpression:
        if (props_BitwiseOrExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("bitwise OR");
          cpb.rawPresentation("|");
          props_BitwiseOrExpression = cpb.create();
        }
        return props_BitwiseOrExpression;
      case LanguageConceptSwitch.BitwiseRightExpression:
        if (props_BitwiseRightExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("right shift");
          cpb.rawPresentation(">>");
          props_BitwiseRightExpression = cpb.create();
        }
        return props_BitwiseRightExpression;
      case LanguageConceptSwitch.BitwiseXorExpression:
        if (props_BitwiseXorExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("bitwise XOR");
          cpb.rawPresentation("^");
          props_BitwiseXorExpression = cpb.create();
        }
        return props_BitwiseXorExpression;
      case LanguageConceptSwitch.BoolLiteral:
        if (props_BoolLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BoolLiteral");
          props_BoolLiteral = cpb.create();
        }
        return props_BoolLiteral;
      case LanguageConceptSwitch.BoolType:
        if (props_BoolType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("logical value type");
          cpb.rawPresentation("bool");
          props_BoolType = cpb.create();
        }
        return props_BoolType;
      case LanguageConceptSwitch.BuiltInClassType:
        if (props_BuiltInClassType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BuiltInClassType = cpb.create();
        }
        return props_BuiltInClassType;
      case LanguageConceptSwitch.BuiltInIsExpression:
        if (props_BuiltInIsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("is with built-in type");
          cpb.rawPresentation("is");
          props_BuiltInIsExpression = cpb.create();
        }
        return props_BuiltInIsExpression;
      case LanguageConceptSwitch.BuiltInType:
        if (props_BuiltInType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BuiltInType = cpb.create();
        }
        return props_BuiltInType;
      case LanguageConceptSwitch.ByteType:
        if (props_ByteType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("8-bit unsigned integer");
          cpb.rawPresentation("byte");
          props_ByteType = cpb.create();
        }
        return props_ByteType;
      case LanguageConceptSwitch.CharLiteral:
        if (props_CharLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CharLiteral");
          props_CharLiteral = cpb.create();
        }
        return props_CharLiteral;
      case LanguageConceptSwitch.CharType:
        if (props_CharType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("character");
          cpb.rawPresentation("char");
          props_CharType = cpb.create();
        }
        return props_CharType;
      case LanguageConceptSwitch.CheckedExpression:
        if (props_CheckedExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("checked block");
          cpb.rawPresentation("checked");
          props_CheckedExpression = cpb.create();
        }
        return props_CheckedExpression;
      case LanguageConceptSwitch.CheckedOrUncheckedExpression:
        if (props_CheckedOrUncheckedExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_CheckedOrUncheckedExpression = cpb.create();
        }
        return props_CheckedOrUncheckedExpression;
      case LanguageConceptSwitch.CommaConstant:
        if (props_CommaConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("comma");
          cpb.rawPresentation(",");
          props_CommaConstant = cpb.create();
        }
        return props_CommaConstant;
      case LanguageConceptSwitch.ConstantUtility:
        if (props_ConstantUtility == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ConstantUtility = cpb.create();
        }
        return props_ConstantUtility;
      case LanguageConceptSwitch.DecimalType:
        if (props_DecimalType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("128-bit float");
          cpb.rawPresentation("decimal");
          props_DecimalType = cpb.create();
        }
        return props_DecimalType;
      case LanguageConceptSwitch.DivideAssignExpression:
        if (props_DivideAssignExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("/=");
          props_DivideAssignExpression = cpb.create();
        }
        return props_DivideAssignExpression;
      case LanguageConceptSwitch.DivisionExpression:
        if (props_DivisionExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("division operator");
          cpb.rawPresentation("/");
          props_DivisionExpression = cpb.create();
        }
        return props_DivisionExpression;
      case LanguageConceptSwitch.DoubleType:
        if (props_DoubleType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("64-bit float");
          cpb.rawPresentation("double");
          props_DoubleType = cpb.create();
        }
        return props_DoubleType;
      case LanguageConceptSwitch.DummyExpression:
        if (props_DummyExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dummy");
          props_DummyExpression = cpb.create();
        }
        return props_DummyExpression;
      case LanguageConceptSwitch.DummyUnaryExpression:
        if (props_DummyUnaryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("uDummy");
          props_DummyUnaryExpression = cpb.create();
        }
        return props_DummyUnaryExpression;
      case LanguageConceptSwitch.EqualsExpression:
        if (props_EqualsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("equality operator");
          cpb.rawPresentation("==");
          props_EqualsExpression = cpb.create();
        }
        return props_EqualsExpression;
      case LanguageConceptSwitch.Expression:
        if (props_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Expression = cpb.create();
        }
        return props_Expression;
      case LanguageConceptSwitch.ExpressionInBraces:
        if (props_ExpressionInBraces == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("(expr)");
          props_ExpressionInBraces = cpb.create();
        }
        return props_ExpressionInBraces;
      case LanguageConceptSwitch.ExpressionList:
        if (props_ExpressionList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ExpressionList");
          props_ExpressionList = cpb.create();
        }
        return props_ExpressionList;
      case LanguageConceptSwitch.ExpressionListExpression:
        if (props_ExpressionListExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("expr[list]");
          props_ExpressionListExpression = cpb.create();
        }
        return props_ExpressionListExpression;
      case LanguageConceptSwitch.ExpressionTest:
        if (props_ExpressionTest == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ExpressionTest");
          props_ExpressionTest = cpb.create();
        }
        return props_ExpressionTest;
      case LanguageConceptSwitch.FloatType:
        if (props_FloatType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("32-bit float");
          cpb.rawPresentation("float");
          props_FloatType = cpb.create();
        }
        return props_FloatType;
      case LanguageConceptSwitch.FunctionCallExpression:
        if (props_FunctionCallExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("method call");
          cpb.rawPresentation("expr(args)");
          props_FunctionCallExpression = cpb.create();
        }
        return props_FunctionCallExpression;
      case LanguageConceptSwitch.GreaterThanExpression:
        if (props_GreaterThanExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("greater than operator");
          cpb.rawPresentation(">");
          props_GreaterThanExpression = cpb.create();
        }
        return props_GreaterThanExpression;
      case LanguageConceptSwitch.GreaterThanOrEqualToExpression:
        if (props_GreaterThanOrEqualToExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("greater than or equal to operator");
          cpb.rawPresentation(">=");
          props_GreaterThanOrEqualToExpression = cpb.create();
        }
        return props_GreaterThanOrEqualToExpression;
      case LanguageConceptSwitch.Identifier:
        if (props_Identifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("identifier");
          props_Identifier = cpb.create();
        }
        return props_Identifier;
      case LanguageConceptSwitch.IntLiteral:
        if (props_IntLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IntLiteral");
          props_IntLiteral = cpb.create();
        }
        return props_IntLiteral;
      case LanguageConceptSwitch.IntType:
        if (props_IntType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("32-bit signed integer");
          cpb.rawPresentation("int");
          props_IntType = cpb.create();
        }
        return props_IntType;
      case LanguageConceptSwitch.IntegralType:
        if (props_IntegralType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IntegralType = cpb.create();
        }
        return props_IntegralType;
      case LanguageConceptSwitch.IsExpression:
        if (props_IsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("is operator");
          cpb.rawPresentation("is");
          props_IsExpression = cpb.create();
        }
        return props_IsExpression;
      case LanguageConceptSwitch.LeftShiftAssignExpression:
        if (props_LeftShiftAssignExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<<=");
          props_LeftShiftAssignExpression = cpb.create();
        }
        return props_LeftShiftAssignExpression;
      case LanguageConceptSwitch.LessThanExpression:
        if (props_LessThanExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("less than operator");
          cpb.rawPresentation("<");
          props_LessThanExpression = cpb.create();
        }
        return props_LessThanExpression;
      case LanguageConceptSwitch.LessThanOrEqualToExpression:
        if (props_LessThanOrEqualToExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("less than or equal to operator");
          cpb.rawPresentation("<=");
          props_LessThanOrEqualToExpression = cpb.create();
        }
        return props_LessThanOrEqualToExpression;
      case LanguageConceptSwitch.Literal:
        if (props_Literal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Literal = cpb.create();
        }
        return props_Literal;
      case LanguageConceptSwitch.LongType:
        if (props_LongType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("64-bit signed integer");
          cpb.rawPresentation("long");
          props_LongType = cpb.create();
        }
        return props_LongType;
      case LanguageConceptSwitch.MinusAssignExpression:
        if (props_MinusAssignExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("-=");
          props_MinusAssignExpression = cpb.create();
        }
        return props_MinusAssignExpression;
      case LanguageConceptSwitch.MinusExpression:
        if (props_MinusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("minus operator");
          cpb.rawPresentation("-");
          props_MinusExpression = cpb.create();
        }
        return props_MinusExpression;
      case LanguageConceptSwitch.ModuloAssignExpression:
        if (props_ModuloAssignExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("%=");
          props_ModuloAssignExpression = cpb.create();
        }
        return props_ModuloAssignExpression;
      case LanguageConceptSwitch.ModuloExpression:
        if (props_ModuloExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("modulo operator");
          cpb.rawPresentation("%");
          props_ModuloExpression = cpb.create();
        }
        return props_ModuloExpression;
      case LanguageConceptSwitch.MultiplicationExpression:
        if (props_MultiplicationExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("multiplication operator");
          cpb.rawPresentation("*");
          props_MultiplicationExpression = cpb.create();
        }
        return props_MultiplicationExpression;
      case LanguageConceptSwitch.MultiplyAssignExpression:
        if (props_MultiplyAssignExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("*=");
          props_MultiplyAssignExpression = cpb.create();
        }
        return props_MultiplyAssignExpression;
      case LanguageConceptSwitch.NewArrayTypeExpression:
        if (props_NewArrayTypeExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("new array");
          cpb.rawPresentation("new");
          props_NewArrayTypeExpression = cpb.create();
        }
        return props_NewArrayTypeExpression;
      case LanguageConceptSwitch.NewNonArrayExpression:
        if (props_NewNonArrayExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("new non-array type");
          cpb.rawPresentation("new");
          props_NewNonArrayExpression = cpb.create();
        }
        return props_NewNonArrayExpression;
      case LanguageConceptSwitch.NewTypeExpression:
        if (props_NewTypeExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create new instance");
          cpb.rawPresentation("new");
          props_NewTypeExpression = cpb.create();
        }
        return props_NewTypeExpression;
      case LanguageConceptSwitch.NonArrayType:
        if (props_NonArrayType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_NonArrayType = cpb.create();
        }
        return props_NonArrayType;
      case LanguageConceptSwitch.NotEqualsExpression:
        if (props_NotEqualsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("inequality operator");
          cpb.rawPresentation("!=");
          props_NotEqualsExpression = cpb.create();
        }
        return props_NotEqualsExpression;
      case LanguageConceptSwitch.NullCoalescingExpression:
        if (props_NullCoalescingExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("null coalescing operator");
          cpb.rawPresentation("??");
          props_NullCoalescingExpression = cpb.create();
        }
        return props_NullCoalescingExpression;
      case LanguageConceptSwitch.NullLiteral:
        if (props_NullLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("null");
          props_NullLiteral = cpb.create();
        }
        return props_NullLiteral;
      case LanguageConceptSwitch.ObjectType:
        if (props_ObjectType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("ancestor of all types");
          cpb.rawPresentation("object");
          props_ObjectType = cpb.create();
        }
        return props_ObjectType;
      case LanguageConceptSwitch.OrAssignExpression:
        if (props_OrAssignExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("|=");
          props_OrAssignExpression = cpb.create();
        }
        return props_OrAssignExpression;
      case LanguageConceptSwitch.OrExpression:
        if (props_OrExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("logical OR");
          cpb.rawPresentation("||");
          props_OrExpression = cpb.create();
        }
        return props_OrExpression;
      case LanguageConceptSwitch.OutConstant:
        if (props_OutConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("out keyword");
          cpb.rawPresentation("out");
          props_OutConstant = cpb.create();
        }
        return props_OutConstant;
      case LanguageConceptSwitch.PlusAssignExpression:
        if (props_PlusAssignExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("+=");
          props_PlusAssignExpression = cpb.create();
        }
        return props_PlusAssignExpression;
      case LanguageConceptSwitch.PlusExpression:
        if (props_PlusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("plus operator");
          cpb.rawPresentation("+");
          props_PlusExpression = cpb.create();
        }
        return props_PlusExpression;
      case LanguageConceptSwitch.PostDecrementExpression:
        if (props_PostDecrementExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("post-decrement");
          cpb.rawPresentation("--");
          props_PostDecrementExpression = cpb.create();
        }
        return props_PostDecrementExpression;
      case LanguageConceptSwitch.PostIncrementExpression:
        if (props_PostIncrementExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("post-increment");
          cpb.rawPresentation("++");
          props_PostIncrementExpression = cpb.create();
        }
        return props_PostIncrementExpression;
      case LanguageConceptSwitch.PreDecrementExpression:
        if (props_PreDecrementExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("pre-decrement");
          cpb.rawPresentation("--");
          props_PreDecrementExpression = cpb.create();
        }
        return props_PreDecrementExpression;
      case LanguageConceptSwitch.PreIncrementExpression:
        if (props_PreIncrementExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("pre-increment");
          cpb.rawPresentation("++");
          props_PreIncrementExpression = cpb.create();
        }
        return props_PreIncrementExpression;
      case LanguageConceptSwitch.PredefinedDotExpression:
        if (props_PredefinedDotExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("??? extension method ???");
          cpb.rawPresentation(".");
          props_PredefinedDotExpression = cpb.create();
        }
        return props_PredefinedDotExpression;
      case LanguageConceptSwitch.PrimaryDotExpression:
        if (props_PrimaryDotExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("acces a member in expression result");
          cpb.rawPresentation(".");
          props_PrimaryDotExpression = cpb.create();
        }
        return props_PrimaryDotExpression;
      case LanguageConceptSwitch.PrimaryExpression:
        if (props_PrimaryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PrimaryExpression = cpb.create();
        }
        return props_PrimaryExpression;
      case LanguageConceptSwitch.QualifiedIdentifier:
        if (props_QualifiedIdentifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("!!!TODO!!! this will be revisited when working on identifiers");
          cpb.rawPresentation("QualifiedIdentifier");
          props_QualifiedIdentifier = cpb.create();
        }
        return props_QualifiedIdentifier;
      case LanguageConceptSwitch.RankSpecifier:
        if (props_RankSpecifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RankSpecifier");
          props_RankSpecifier = cpb.create();
        }
        return props_RankSpecifier;
      case LanguageConceptSwitch.RealLiteral:
        if (props_RealLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RealLiteral");
          props_RealLiteral = cpb.create();
        }
        return props_RealLiteral;
      case LanguageConceptSwitch.RefConstant:
        if (props_RefConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("ref keyword");
          cpb.rawPresentation("ref");
          props_RefConstant = cpb.create();
        }
        return props_RefConstant;
      case LanguageConceptSwitch.RefOutConstant:
        if (props_RefOutConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_RefOutConstant = cpb.create();
        }
        return props_RefOutConstant;
      case LanguageConceptSwitch.RightShiftAssignExpression:
        if (props_RightShiftAssignExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(">>=");
          props_RightShiftAssignExpression = cpb.create();
        }
        return props_RightShiftAssignExpression;
      case LanguageConceptSwitch.SByteType:
        if (props_SByteType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("8-bit signed integer");
          cpb.rawPresentation("sbyte");
          props_SByteType = cpb.create();
        }
        return props_SByteType;
      case LanguageConceptSwitch.ShortType:
        if (props_ShortType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("16-bit signed integer");
          cpb.rawPresentation("short");
          props_ShortType = cpb.create();
        }
        return props_ShortType;
      case LanguageConceptSwitch.StringLiteral:
        if (props_StringLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StringLiteral");
          props_StringLiteral = cpb.create();
        }
        return props_StringLiteral;
      case LanguageConceptSwitch.StringType:
        if (props_StringType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("String");
          cpb.rawPresentation("string");
          props_StringType = cpb.create();
        }
        return props_StringType;
      case LanguageConceptSwitch.TernaryOperatorExpression:
        if (props_TernaryOperatorExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("ternary operator");
          cpb.rawPresentation("expr ? expr : expr");
          props_TernaryOperatorExpression = cpb.create();
        }
        return props_TernaryOperatorExpression;
      case LanguageConceptSwitch.ThisExpression:
        if (props_ThisExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("reference to \"this\" object");
          cpb.rawPresentation("this");
          props_ThisExpression = cpb.create();
        }
        return props_ThisExpression;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Type");
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.TypeOf:
        if (props_TypeOf == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("typeof");
          props_TypeOf = cpb.create();
        }
        return props_TypeOf;
      case LanguageConceptSwitch.TypeOrVoid:
        if (props_TypeOrVoid == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TypeOrVoid = cpb.create();
        }
        return props_TypeOrVoid;
      case LanguageConceptSwitch.UIntType:
        if (props_UIntType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("32-bit unsigned integer");
          cpb.rawPresentation("uint");
          props_UIntType = cpb.create();
        }
        return props_UIntType;
      case LanguageConceptSwitch.ULongType:
        if (props_ULongType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("64-bit unsigned integer");
          cpb.rawPresentation("ulong");
          props_ULongType = cpb.create();
        }
        return props_ULongType;
      case LanguageConceptSwitch.UShortType:
        if (props_UShortType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("16-bit unsigned integer");
          cpb.rawPresentation("ushort");
          props_UShortType = cpb.create();
        }
        return props_UShortType;
      case LanguageConceptSwitch.UnaryDereferenceExpression:
        if (props_UnaryDereferenceExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("dereference");
          cpb.rawPresentation("*");
          props_UnaryDereferenceExpression = cpb.create();
        }
        return props_UnaryDereferenceExpression;
      case LanguageConceptSwitch.UnaryExpression:
        if (props_UnaryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_UnaryExpression = cpb.create();
        }
        return props_UnaryExpression;
      case LanguageConceptSwitch.UnaryExpressionWithOperator:
        if (props_UnaryExpressionWithOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_UnaryExpressionWithOperator = cpb.create();
        }
        return props_UnaryExpressionWithOperator;
      case LanguageConceptSwitch.UnaryMinusExpression:
        if (props_UnaryMinusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("unary minus");
          cpb.rawPresentation("-");
          props_UnaryMinusExpression = cpb.create();
        }
        return props_UnaryMinusExpression;
      case LanguageConceptSwitch.UnaryNotExpression:
        if (props_UnaryNotExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("unary not");
          cpb.rawPresentation("!");
          props_UnaryNotExpression = cpb.create();
        }
        return props_UnaryNotExpression;
      case LanguageConceptSwitch.UnaryPlusExpression:
        if (props_UnaryPlusExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("unary plus");
          cpb.rawPresentation("+");
          props_UnaryPlusExpression = cpb.create();
        }
        return props_UnaryPlusExpression;
      case LanguageConceptSwitch.UnaryTildeExpression:
        if (props_UnaryTildeExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("tilda");
          cpb.rawPresentation("~");
          props_UnaryTildeExpression = cpb.create();
        }
        return props_UnaryTildeExpression;
      case LanguageConceptSwitch.UnaryTypedExpression:
        if (props_UnaryTypedExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("explicit conversion");
          cpb.rawPresentation("(type) uExpr");
          props_UnaryTypedExpression = cpb.create();
        }
        return props_UnaryTypedExpression;
      case LanguageConceptSwitch.UncheckedExpression:
        if (props_UncheckedExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("unchecked block");
          cpb.rawPresentation("unchecked");
          props_UncheckedExpression = cpb.create();
        }
        return props_UncheckedExpression;
      case LanguageConceptSwitch.VariableInitializer:
        if (props_VariableInitializer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_VariableInitializer = cpb.create();
        }
        return props_VariableInitializer;
      case LanguageConceptSwitch.VoidType:
        if (props_VoidType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("void");
          props_VoidType = cpb.create();
        }
        return props_VoidType;
      case LanguageConceptSwitch.XorAssignExpression:
        if (props_XorAssignExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("^=");
          props_XorAssignExpression = cpb.create();
        }
        return props_XorAssignExpression;
    }
    return null;
  }
}
