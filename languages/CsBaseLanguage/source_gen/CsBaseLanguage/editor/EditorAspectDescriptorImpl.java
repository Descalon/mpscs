package CsBaseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Argument_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new ArgumentsList_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new ArrayInitializer_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new AssignmentExpression_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new BaseAccessExpression_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new BinaryOperation_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new BoolLiteral_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new BuiltInIsExpression_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new BuiltInType_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new CharLiteral_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new CheckedOrUncheckedExpression_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new CommaConstant_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new ConstantUtility_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new DummyExpression_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new DummyUnaryExpression_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new ExpressionInBraces_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new ExpressionList_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new ExpressionListExpression_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new FunctionCallExpression_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new Identifier_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new IntLiteral_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new Literal_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new NewArrayTypeExpression_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new NewNonArrayExpression_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new NewTypeExpression_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new NullLiteral_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new PostDecrementExpression_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new PostIncrementExpression_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new PredefinedDotExpression_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new PrimaryDotExpression_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new QualifiedIdentifier_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new RankSpecifier_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new RealLiteral_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new RefOutConstant_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new StringLiteral_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new TernaryOperatorExpression_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new ThisExpression_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new Type_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new TypeOf_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new UnaryExpressionWithOperator_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new UnaryTypedExpression_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new VoidType_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09d3L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09d2L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96597L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x2b6e5dd872dba7daL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cd14eeL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c598b7L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99edL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec43L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c5ec49L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99f6L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cf0c0cL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c75645L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09e7L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c576a5L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6dc24L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cb2b4aL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c965c9L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc6191L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09ccL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cae6bbL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99eeL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99e6L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca181eL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c96575L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cdd285L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99f8L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cd70e4L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cd70b6L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cb70c8L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cb709eL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c90810L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c75642L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99f5L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4cc09f0L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99f7L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c50c1fL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ccba7eL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c72d7fL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ce37e6L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c6b663L), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4c72d7cL), MetaIdFactory.conceptId(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x2b6e5dd872da524bL)).seal();
}
